ext {
    runCurl = this.&runCurl
    encodeBase64 = this.&encodeBase64
    generateBearerToken = this.&generateBearerToken
    checkApiExists = this.&checkApiExists
}

def runCurl(http_action, contentType, authorization, url, payload){

    def responseString = ""
    def httpStatusCode = ""
    def responsePayload = ""

    if (http_action) {

        if (payload) {

            println "CURL with HTTP Method and Payload"

            new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    executable = "curl"
                    args = [
                            '-k', '-X', http_action,
                            '-H', contentType,
                            '-H', authorization,
                            url,
                            '-d', payload
                    ]
                    standardOutput = os
                }
                responseString = os.toString()
                println "responseString = " + responseString
            }
        }
        else{

            println "CURL with only HTTP Method"

            new ByteArrayOutputStream().withStream { os ->
                def result = exec {
                    executable = "curl"
                    args = [
                            '-k', '-X', http_action,
                            '-H', contentType,
                            '-H', authorization,
                            url
                    ]
                    standardOutput = os
                }
                responseString = os.toString()
                println "responseString = " + responseString
            }

        }
    }
    else if(payload){

        println "CURL without an HTTP Method but with payload"

        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "curl"
                args = [
                        '-k',
                        '-H', authorization,
                        url,
                        '-d', payload
                ]
                standardOutput = os
            }
            responseString = os.toString()
            println "responseString = " + responseString
        }
    }
    else{
        println "CURL without an HTTP Method and payload"
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "curl"
                args = [
                        '-k',
                        '-H', authorization,
                        url
                ]
                standardOutput = os
            }
            responseString = os.toString()
            println "responseString = " + responseString
        }
    }
    return responseString
}

def encodeBase64(encodingStr){
    String encodedStr = encodingStr.bytes.encodeBase64().toString()
    return encodedStr
}

def generateBearerToken(scope,basicAuthCode){

    def contentType = ""
    def authorization = "Authorization: Basic "+basicAuthCode
    def url = "${apimHttpsServer}/token"
    def type = ""
    def payload ="grant_type=password&username=${apimUsername}&password=${apimPassword}&scope=${scope}"

    def bearerTokenResponse = runCurl(type,contentType,authorization,url,payload)

    def parsedResponse =  new groovy.json.JsonSlurper().parseText(bearerTokenResponse)

    def bearerToken =  parsedResponse.access_token

    return bearerToken
}

def checkApiExists(apiName,bearerToken){

    def contentType = ""
    def authorization = "Authorization: Bearer "+bearerToken
    def url = "${apimPublisher}/api/am/publisher/v0.14/apis?query=name:${apiName}"
    def type = ""
    def payload =""

    def apiSearchResponse = runCurl(type,contentType,authorization,url,payload)

    return apiSearchResponse

}

