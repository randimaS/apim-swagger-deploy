ext {
    runCurl = this.&runCurl
    encodeBase64 = this.&encodeBase64
    generateBearerToken = this.&generateBearerToken
}

def runCurl(type, contentType, authorization, url, payload){

    def responseString =""

    if (type) {

        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "curl"
                args = [
                        '-k', '-X', type,
                        '-H', contentType,
                        '-H', authorization,
                        url,
                        '-d', payload
                ]
                standardOutput = os
            }
            responseString = os.toString()
            println "responseString = " + responseString
        }
    }
    else if(payload){
        println "type is empty"
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "curl"
                args = [
                        '-k',
                        '-H', authorization,
                        url,
                        '-d', payload
                ]
                standardOutput = os
            }
            responseString = os.toString()
            println "responseString = " + responseString
        }
    }
    else{
        println "payload is empty"
        new ByteArrayOutputStream().withStream { os ->
            def result = exec {
                executable = "curl"
                args = [
                        '-k',
                        '-H', authorization,
                        url
                ]
                standardOutput = os
            }
            responseString = os.toString()
            println "responseString = " + responseString
        }
    }
    return responseString
}

def encodeBase64(encodingStr){
    String encodedStr = encodingStr.bytes.encodeBase64().toString()
    return encodedStr
}

def generateBearerToken(scope,basicAuthCode){

    def contentType = ""
    def authorization = "Authorization: Basic "+basicAuthCode
    def url = "${apimHttpsServer}/token"
    def type = ""
    def payload ="grant_type=password&username=${apimUsername}&password=${apimPassword}&scope=${scope}"

    def bearerTokenResponse = runCurl(type,contentType,authorization,url,payload)

    def parsedResponse =  new groovy.json.JsonSlurper().parseText(bearerTokenResponse)

    def bearerToken =  parsedResponse.access_token

    return bearerToken
}

